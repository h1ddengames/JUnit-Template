# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    #- cron: '*/5 * * * *' # Every 5 minutes
    - cron: '0 0 * * 0' # At 00:00 on Sunday.

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up JDK 11
        uses: actions/setup-java@v1.4.3
        with:
          java-package: jdk
          java-version: 11.0.9

      - name: Set Java_HOME to JDK 11
        run: |
          export JAVA_HOME=/usr/bin/java
          echo $JAVA_HOME
          java --version

      - name: Download and install Allure executable
        run: |
          sudo wget https://github.com/allure-framework/allure2/releases/download/2.13.8/allure_2.13.8-1_all.deb
          sudo dpkg -i allure_2.13.8-1_all.deb

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # mvn clean has been modified in the pom.xml file to backup allure-results history files
      # mvn test has been modified in the pom.xml file to generate allure reports from allure-results history + current test results.
      # mvn package has been modified in the pom.xml file to generate javadocs in target/javadocs/apidocs
      - name: Build with Maven
        run: mvn -B clean test package --file pom.xml

      # Recently created environment variables do not persist through new run statements.
      # Create required directories
      # Copies the jar file in target directory matching artifactId-version.jar (ex: Project-Template-2.0.0.jar)
      # The variable TIME is set by doing the following:
        # 1. Get the current time in America/Los_Angeles
        # 2. Convert the time obtained from the previous step to month-day-year--time (ex: 01-11-2021--05:09:52 PM)
        # 3. Remove any whitespace from the previous step (ex 01-11-2021--05:09:52PM)
        # 4. Replace all : with - so that the filename can be valid within all filesystems (ex: 01-11-2021-05.09.52PM)
      - name: Set environment variable for time (ex. 01-11-2021--05.09.52PM)
        run: |
          export TIME=$(TZ='America/Los_Angeles' date +"%m-%d-%Y--%r" | tr -d "[:space:]" | sed 's/:/./g')
          echo $TIME
          mkdir -p output/${TIME}/jars
          mkdir -p output/${TIME}/javadocs
          mkdir -p output/${TIME}/reports
          mkdir -p output/${TIME}/results
          cp target/$(grep -o "<artifactId>.*</artifactId>" pom.xml | head -1 | sed "s#<artifactId>###\g" | sed "s#</artifactId>###\g")-$(grep -o "<version>.*</version>" pom.xml | head -1 | sed "s#<version>###\g" | sed "s#</version>###\g").jar output/$TIME/jars
          cp -R target/javadocs/apidocs/* output/${TIME}/javadocs
          cp -R docs/allure-reports/* output/${TIME}/reports
          cp -R docs/allure-results/* output/${TIME}/results
          ls -al output

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: reports+jar
          path: |
            output